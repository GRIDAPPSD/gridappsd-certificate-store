name: Publish to PyPI

on:
  release:
    types: [created]
  workflow_dispatch:  # Allows manual triggering

jobs:
  # Call the test workflow first
  test:
    uses: ./.github/workflows/python-test.yml
    # Use default parameters

  # Only proceed to publish if tests passed
  publish:
    needs: test  # Depend on the test job
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for pushing to the repository
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      # ... (version extraction, git config, branch determination)
      
      - name: Update version in pyproject.toml
        id: version_update
        if: github.event_name == 'release'
        run: |
          CURRENT_VERSION=$(poetry version -s)
          if [ "$VERSION" != "$CURRENT_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $VERSION"
            poetry version $VERSION
            git add pyproject.toml
            git commit -m "Bump version to $VERSION [skip ci]"
            
            # Strict push - fail if can't update repository
            git push origin "$BRANCH"
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "Version in pyproject.toml already matches $VERSION, no update needed"
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Install dependencies
        run: |
          poetry install
      
      - name: Build package
        run: |
          poetry build
      
      - name: Publish to PyPI
        if: success() && (steps.version_update.outputs.updated == 'false' || steps.version_update.outputs.updated == 'true')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true